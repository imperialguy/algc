[rules]
# lambda data, model: 0 is a throwaway rule. it get's overriden in the code
# it is kept here only to make sure all model features are listed.
rules: {
	'frequency': {
		'div_21':                       lambda data, model: 1 if data['division'] == 21 else 0,
		'div_26':                       lambda data, model: 1 if data['division'] == 26 else 0,
		'div_55':                       lambda data, model: 1 if data['division'] == 55 else 0,
		'div_54':                       lambda data, model: 1 if data['division'] == 54 else 0,
		'div_59':                       lambda data, model: 1 if data['division'] == 59 else 0,
		'div_82':                       lambda data, model: 1 if data['division'] == 82 else 0,
		'sic_bin_ab':                   lambda data, model: 1 if data['sic_class'].lower() in ('a', 'b') else 0,
		'sic_bin_cd':                   lambda data, model: 1 if data['sic_class'].lower() in ('c', 'd') else 0,
		'sic_bin_e':                    lambda data, model: 1 if data['sic_class'].lower() == 'e' else 0,
		'sic_bin_g':                    lambda data, model: 1 if data['sic_class'].lower() == 'g' else 0,
		'sic_bin_i':                    lambda data, model: 1 if data['sic_class'].lower() == 'i' else 0,
		'pol_year_080910':				lambda data, model: 1 if data['effective_year'] in (2008, 2009, 2010) else 0,
		'wt_class_missing':             lambda data, model: 0,
		'wt_class_extra':               lambda data, model: 1 if data['class'].lower() == 'extra heavy' else 0,
		'wt_class_medium_heavy':        lambda data, model: 1 if data['class'].lower() in ('medium', 'heavy') else 0,
		'wt_class_light':               lambda data, model: 1 if data['class'].lower() == 'light' else 0,
		'predom_radius_long':           lambda data, model: 1 if data['predominant_radius'].lower() == 'long' else 0,
		'predom_radius_missing':        lambda data, model: 0,
		'predom_radius_local_inter':    lambda data, model: 1 if data['predominant_radius'].lower() in ('local', 'intermediate') else 0,
		'predom_state_ca':              lambda data, model: 1 if data['state'].lower() == 'ca' else 0,
		'predom_state_nj':              lambda data, model: 1 if data['state'].lower() == 'nj' else 0,
		'predom_state_ny':              lambda data, model: 1 if data['state'].lower() == 'ny' else 0,
		'predom_state_il':              lambda data, model: 1 if data['state'].lower() == 'il' else 0,
		'log_impute_exposure':          lambda data, model: 0,
		'log_fpct':                     lambda data, model: 0,
		'log_legal_cnt_sum':            lambda data, model: 0,
		'log_density':                  lambda data, model: 0,
		'm_dnb':                        lambda data, model: 0, 
		'm_density':                    lambda data, model: 0
		},
	'parameters': {
		'cnt_deviation_0':              lambda data, model: 0,
		'cnt_deviation_4':              lambda data, model: 0,
		'div_21':                       lambda data, model: 1 if data['division'] == 21 else 0,
		'div_26':                       lambda data, model: 1 if data['division'] == 26 else 0,
		'div_55':                       lambda data, model: 1 if data['division'] == 55 else 0,
		'div_59':                       lambda data, model: 1 if data['division'] == 59 else 0,
		'sic_bin_g':                    lambda data, model: 1 if data['sic_class'].lower() == 'g' else 0,
		'sic_bin_ch':                   lambda data, model: 1 if data['sic_class'].lower() in ('c', 'h') else 0,
		'sic_bin_be':                   lambda data, model: 1 if data['sic_class'].lower() in ('b', 'e') else 0,
		'sic_bin_afij':                 lambda data, model: 1 if data['sic_class'].lower() in ('a', 'f', 'i', 'j') else 0,
		'pol_year_2008':                lambda data, model: 1 if data['effective_year'] == 2008 else 0,
		'pol_year_2009':                lambda data, model: 1 if data['effective_year'] == 2009 else 0,
		'pol_year_2010':                lambda data, model: 1 if data['effective_year'] == 2010 else 0,
		'pol_year_2011':                lambda data, model: 1 if data['effective_year'] == 2011 else 0,
		'wt_class_missing':             lambda data, model: 0,
		'wt_class_extra':               lambda data, model: 1 if data['class'].lower() == 'extra heavy' else 0,
		'wt_class_medium_heavy':        lambda data, model: 1 if data['class'].lower() in ('medium', 'heavy') else 0,
		'predom_radius_missing':        lambda data, model: 0,
		'predom_radius_inter':          lambda data, model: 1 if data['predominant_radius'].lower() == 'intermediate' else 0,
		'predom_state_ca':              lambda data, model: 1 if data['state'].lower() == 'ca' else 0,
		'predom_state_fl':              lambda data, model: 1 if data['state'].lower() == 'fl' else 0,
		'predom_state_nj':              lambda data, model: 1 if data['state'].lower() == 'nj' else 0,
		'predom_state_nyil':            lambda data, model: 1 if data['state'].lower() in ('ny', 'il') else 0,
		'predom_state_tx':              lambda data, model: 1 if data['state'].lower() == 'tx' else 0,
		'log_impute_exposure':          lambda data, model: 0,
		'log_fpct':                     lambda data, model: 0,
		'log_legal_cnt_sum':            lambda data, model: 0,
		'log_medage':                   lambda data, model: 0,
		'm_dnb':                        lambda data, model: 0, 
		'm_medage':                     lambda data, model: 0
		}
	}
